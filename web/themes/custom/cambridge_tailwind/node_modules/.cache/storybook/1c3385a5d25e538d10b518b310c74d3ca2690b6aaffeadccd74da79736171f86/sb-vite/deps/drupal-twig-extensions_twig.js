import {
  require_date,
  require_twig
} from "./chunk-XIFDATKF.js";
import {
  require_src
} from "./chunk-GMODRSVZ.js";
import {
  __commonJS,
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/drupal-twig-extensions/state.cjs
var require_state = __commonJS({
  "node_modules/drupal-twig-extensions/state.cjs"(exports, module) {
    var state2 = {};
    module.exports.state = state2;
  }
});

// node_modules/lodash.clonedeep/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.clonedeep/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reFlags = /\w*$/;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    function addMapEntry(map, pair) {
      map.set(pair[0], pair[1]);
      return map;
    }
    function addSetEntry(set, value) {
      set.add(value);
      return set;
    }
    function arrayEach(array, iteratee) {
      var index = -1, length = array ? array.length : 0;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1, length = array ? array.length : 0;
      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer = moduleExports ? root.Buffer : void 0;
    var Symbol = root.Symbol;
    var Uint8Array = root.Uint8Array;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView = getNative(root, "DataView");
    var Map2 = getNative(root, "Map");
    var Promise2 = getNative(root, "Promise");
    var Set = getNative(root, "Set");
    var WeakMap = getNative(root, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set);
    var weakMapCtorString = toSource(WeakMap);
    var symbolProto = Symbol ? Symbol.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }
    function stackClear() {
      this.__data__ = new ListCache();
    }
    function stackDelete(key) {
      return this.__data__["delete"](key);
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        object[key] = value;
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }
    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (!isArr) {
        var props = isFull ? getAllKeys(value) : keys(value);
      }
      arrayEach(props || value, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value[key2];
        }
        assignValue(result, key2, baseClone(subValue, isDeep, isFull, customizer, key2, value, stack));
      });
      return result;
    }
    function baseCreate(proto) {
      return isObject(proto) ? objectCreate(proto) : {};
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseGetTag(value) {
      return objectToString.call(value);
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var result = new buffer.constructor(buffer.length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor());
    }
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor());
    }
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        assignValue(object, key, newValue === void 0 ? source[key] : newValue);
      }
      return object;
    }
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function(value) {
        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function initCloneArray(array) {
      var length = array.length, result = array.constructor(length);
      if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
          return new Ctor(+object);
        case dataViewTag:
          return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object, isDeep);
        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);
        case numberTag:
        case stringTag:
          return new Ctor(object);
        case regexpTag:
          return cloneRegExp(object);
        case setTag:
          return cloneSet(object, isDeep, cloneFunc);
        case symbolTag:
          return cloneSymbol(object);
      }
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function cloneDeep2(value) {
      return baseClone(value, true, true);
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function stubArray() {
      return [];
    }
    function stubFalse() {
      return false;
    }
    module.exports = cloneDeep2;
  }
});

// node_modules/drupal-twig-extensions/lib/helpers/twig/newTwigExtension.js
var newTwigExtension = (name15, callable15, options19 = {}, acceptedArguments17 = []) => [name15, callable15];
var newTwigExtension_default = newTwigExtension;

// node_modules/drupal-twig-extensions/lib/helpers/twig/newEmptyStringExtension.js
var newEmptyStringExtension = (extensionName, options19 = {}, acceptedArguments17 = []) => newTwigExtension_default(
  extensionName,
  function() {
    return "";
  },
  options19,
  acceptedArguments17
);
var newEmptyStringExtension_default = newEmptyStringExtension;

// node_modules/drupal-twig-extensions/lib/helpers/twig/newPassThroughExtension.js
var newPassThroughExtension = (extensionName, options19 = {}, acceptedArguments17 = []) => newTwigExtension_default(
  extensionName,
  function(value) {
    return value;
  },
  options19,
  acceptedArguments17
);
var newPassThroughExtension_default = newPassThroughExtension;

// node_modules/drupal-twig-extensions/lib/config.js
var import_state = __toESM(require_state(), 1);
var config_default = import_state.state;

// node_modules/drupal-twig-extensions/lib/filters/clean_class/definition.js
var name = "clean_class";
var options = {};
var acceptedArguments = [];
function cleanClass(config, string) {
  const identifier = String(string);
  if (!Object.prototype.hasOwnProperty.call(config.cleanClassCache, identifier)) {
    config.cleanClassCache[identifier] = cleanCssIdentifier(
      identifier.toLowerCase()
    );
  }
  return config.cleanClassCache[identifier];
}
function cleanCssIdentifier(identifier, filter) {
  if (typeof filter === "undefined") {
    filter = {
      " ": "-",
      _: "-",
      "/": "-",
      "[": "-",
      "]": ""
    };
  }
  let doubleUnderscoreReplacements = 0;
  if (!Object.prototype.hasOwnProperty.call(filter, "__")) {
    identifier = identifier.replace(/__/g, function() {
      doubleUnderscoreReplacements += 1;
      return "##";
    });
  }
  identifier = identifier.replace(
    new RegExp(
      Object.keys(filter).map(function(value) {
        return "(" + value.replace(/[\\?*+|.^${}[\]()]/g, "\\$&") + ")";
      }).join("|"),
      "g"
    ),
    function(substring) {
      return filter[substring];
    }
  );
  if (doubleUnderscoreReplacements > 0) {
    identifier = identifier.replace(/##/g, "__");
  }
  identifier = identifier.replace(
    /(?:[\0-,./:-@[-^`{-\u00A0]|[\uD800-\uDBFF][\uDC00-\uDFFF])/g,
    ""
  );
  identifier = identifier.replace(/^\d/g, "_").replace(/^(-\d)|^(--)/g, "__");
  return identifier;
}
function configInit(state2) {
  state2.cleanClassCache = {};
}

// node_modules/drupal-twig-extensions/lib/filters/clean_class/twig.js
function callable(string) {
  return cleanClass(config_default, string);
}
var twig_default = newTwigExtension_default(name, callable, options, acceptedArguments);

// node_modules/drupal-twig-extensions/lib/filters/clean_id/definition.js
var name2 = "clean_id";
var options2 = {};
var acceptedArguments2 = [];
function cleanID(id) {
  if (!id || !id.toLowerCase) {
    return "";
  }
  const filter = {
    " ": "-",
    _: "-",
    "[": "-",
    "]": ""
  };
  id = id.toLowerCase().replace(
    new RegExp(
      Object.keys(filter).map(function(value) {
        return `(${value.replace(/[\\?*+|.^${}[\]()]/g, "\\$&")})`;
      }).join("|"),
      "g"
    ),
    function(substring) {
      return filter[substring];
    }
  );
  id = id.replace(/[^A-Za-z0-9\-_]/g, "");
  id = id.replace(/-+/g, "-");
  return id;
}

// node_modules/drupal-twig-extensions/lib/filters/clean_id/twig.js
var callable2 = cleanID;
var twig_default2 = newTwigExtension_default(name2, callable2, options2, acceptedArguments2);

// node_modules/drupal-twig-extensions/lib/filters/drupal_escape/twig.js
var import_twig3 = __toESM(require_twig(), 1);

// node_modules/drupal-twig-extensions/lib/filters/drupal_escape/definition.js
var name3 = "drupal_escape";
var options3 = {
  // PHP Twig option
  needs_environment: true,
  // Twing option
  needs_template: true,
  // @TODO Fix this.
  // Drupal defines this function with the is_safe_callback option set to
  // Twig\Extension\EscaperExtension::twig_escape_filter_is_safe.
  // We use the is_safe option instead:
  is_safe: ["html"]
};
var acceptedArguments3 = [
  { name: "strategy", defaultValue: "html" },
  { name: "charset", defaultValue: null }
];

// node_modules/drupal-twig-extensions/lib/filters/drupal_escape/twig.js
var callable3 = import_twig3.default.filters.escape;
var twig_default3 = newTwigExtension_default(name3, callable3, options3, acceptedArguments3);

// node_modules/drupal-twig-extensions/lib/filters/format_date/definition.js
var import_date = __toESM(require_date(), 1);
var name4 = "format_date";
var options4 = {};
var acceptedArguments4 = [
  { name: "type", defaultValue: "medium" },
  { name: "format", defaultValue: "" },
  { name: "timezone", defaultValue: null },
  { name: "langcode", defaultValue: null }
];
function formatDate(config, timestamp, type = "medium", format = "", timezone = null, langcode = null) {
  if (type !== "custom") {
    format = config.dateFormats[type];
  }
  if (!format) {
    format = config.dateFormats["fallback"];
  }
  return (0, import_date.default)(format, timestamp);
}
function configInit2(state2, config) {
  state2.dateFormats = {
    short: "m/d/Y - H:i",
    medium: "D, m/d/Y - H:i",
    long: "l, F j, Y - H:i",
    html_datetime: "Y-m-dTH:i:sO",
    html_date: "Y-m-d",
    html_time: "H:i:s",
    html_yearless_date: "m-d",
    html_week: "Y-WW",
    html_month: "Y-m",
    html_year: "Y",
    fallback: "D, m/d/Y - H:i"
  };
  if (Object.prototype.hasOwnProperty.call(config, "date_format")) {
    state2.dateFormats = {
      ...state2.dateFormats,
      ...config.date_format
    };
  }
}

// node_modules/drupal-twig-extensions/lib/filters/format_date/twig.js
function callable4(timestamp, args) {
  const type = args[0];
  const format = args[1];
  const timezone = args[2];
  const langcode = args[3];
  return formatDate(config_default, timestamp, type, format, timezone, langcode);
}
var twig_default4 = newTwigExtension_default(name4, callable4, options4, acceptedArguments4);

// node_modules/drupal-twig-extensions/lib/filters/placeholder/definition.js
var name5 = "placeholder";
var options5 = {
  is_safe: ["html"],
  // PHP Twig option
  needs_environment: true,
  // Twing option
  needs_template: true
};
var acceptedArguments5 = [];
function wrapPlaceholder(escapedValue) {
  return escapedValue ? `<em class="placeholder">${escapedValue}</em>` : null;
}

// node_modules/drupal-twig-extensions/lib/filters/placeholder/twig.js
function callable5(value) {
  return wrapPlaceholder(callable3(value, ["html"]));
}
var twig_default5 = newTwigExtension_default(name5, callable5, options5, acceptedArguments5);

// node_modules/drupal-twig-extensions/lib/filters/render/definition.js
var name6 = "render";
var options6 = {};
var acceptedArguments6 = [];
function renderVar(arg) {
  const typeofArg = arg === null ? "null" : Array.isArray(arg) ? "array" : typeof arg;
  if (typeofArg === "null" || // We should treat JavaScript's undefined like PHP's null.
  typeofArg === "undefined" || // A PHP array is more like a JavaScript object, so we check for an empty
  // Array or Object.
  typeofArg === "array" && arg.length === 0 || typeofArg === "object" && Object.keys(arg).length === 0 || arg === "" || arg === false) {
    return "";
  }
  if (arg === true) {
    return "1";
  }
  if (typeofArg === "number" || typeofArg === "bigint" || typeofArg === "string") {
    return arg;
  }
  if (typeofArg === "symbol") {
    return arg.description;
  }
  if (typeofArg === "array") {
    return "";
  }
  if (typeof arg["toRenderable"] === "function") {
    return arg.toRenderable();
  } else if (typeof arg["__toString"] === "function") {
    return arg.__toString();
  }
  if (typeofArg === "function") {
    throw new Error("A function cannot be printed.");
  }
  if (arg["#printed"] && arg["#markup"]) {
    return arg["#markup"];
  }
  arg["#printed"] = false;
  return `${arg}`;
}

// node_modules/drupal-twig-extensions/lib/filters/render/twig.js
var callable6 = renderVar;
var twig_default6 = newTwigExtension_default(name6, callable6, options6, acceptedArguments6);

// node_modules/drupal-twig-extensions/lib/filters/safe_join/twig.js
var import_twig9 = __toESM(require_twig(), 1);

// node_modules/drupal-twig-extensions/lib/filters/safe_join/definition.js
var name7 = "safe_join";
var options7 = {
  needs_environment: true,
  is_safe: ["html"]
};
var acceptedArguments7 = [{ name: "glue", defaultValue: "" }];

// node_modules/drupal-twig-extensions/lib/filters/safe_join/twig.js
var callable7 = import_twig9.default.filters.join;
var twig_default7 = newTwigExtension_default(name7, callable7, options7, acceptedArguments7);

// node_modules/drupal-twig-extensions/lib/filters/t/definition.js
var options8 = {
  is_safe: ["html"]
};
var acceptedArguments8 = [
  { name: "args", defaultValue: {} },
  { name: "options", defaultValue: {} }
];

// node_modules/drupal-twig-extensions/lib/filters/without/definition.js
var import_lodash = __toESM(require_lodash(), 1);
var name8 = "without";
var options9 = {
  is_variadic: true
};
function without(element) {
  if (!element) {
    return {};
  }
  const filteredElement = (0, import_lodash.default)(element);
  let args = Array.prototype.slice.call(arguments, 1);
  if (args.length) {
    let exclude = [];
    args.forEach((name15) => {
      if (Array.isArray(name15)) {
        exclude = exclude.concat(name15);
      } else {
        exclude.push(name15);
      }
    });
    exclude.forEach((name15) => {
      delete filteredElement[name15];
    });
  }
  return filteredElement;
}

// node_modules/drupal-twig-extensions/lib/filters/without/twig.js
function callable8(element, args) {
  return without(element, ...args);
}
var twig_default8 = newTwigExtension_default(name8, callable8, options9);

// node_modules/drupal-twig-extensions/lib/filters/twig.js
var filters = [
  twig_default,
  twig_default2,
  twig_default3,
  twig_default4,
  twig_default5,
  twig_default6,
  twig_default7,
  newPassThroughExtension_default("t", options8, acceptedArguments8),
  newPassThroughExtension_default("trans", options8, acceptedArguments8),
  twig_default8
];
var twig_default9 = filters;

// node_modules/drupal-twig-extensions/lib/functions/active_theme/definition.js
var name9 = "active_theme";
var options10 = {};
var acceptedArguments9 = [];
function activeTheme(config) {
  return config.activeTheme;
}
function configInit3(state2, config) {
  state2.activeTheme = "stark";
  if (Object.prototype.hasOwnProperty.call(config, "active_theme")) {
    state2.activeTheme = config.active_theme;
  }
}

// node_modules/drupal-twig-extensions/lib/functions/active_theme/twig.js
function callable9() {
  return activeTheme(config_default);
}
var twig_default10 = newTwigExtension_default(name9, callable9, options10, acceptedArguments9);

// node_modules/drupal-twig-extensions/lib/functions/active_theme_path/definition.js
var name10 = "active_theme_path";
var options11 = {};
var acceptedArguments10 = [];
function activeThemePath(config) {
  return config.activeThemePath;
}
function configInit4(state2, config) {
  if (Object.prototype.hasOwnProperty.call(config, "active_theme_path")) {
    state2.activeThemePath = config.active_theme_path;
  } else {
    switch (state2.activeTheme) {
      case "bartik":
      case "claro":
      case "classy":
      case "olivero":
      case "seven":
      case "stable":
      case "stable9":
      case "stark":
        state2.activeThemePath = `core/themes/${state2.activeTheme}`;
        break;
      case "umami":
        state2.activeThemePath = "core/profiles/demo_umami/themes/umami";
        break;
      default:
        state2.activeThemePath = `themes/custom/${state2.activeTheme}`;
        break;
    }
  }
}

// node_modules/drupal-twig-extensions/lib/functions/active_theme_path/twig.js
function callable10() {
  return activeThemePath(config_default);
}
var twig_default11 = newTwigExtension_default(name10, callable10, options11, acceptedArguments10);

// node_modules/drupal-twig-extensions/lib/functions/attach_library/definition.js
var options12 = {};
var acceptedArguments11 = [{ name: "library" }];

// node_modules/drupal-twig-extensions/lib/Attribute.js
var import_drupal_attribute = __toESM(require_src(), 1);
var Attribute_default = import_drupal_attribute.default;

// node_modules/drupal-twig-extensions/lib/functions/create_attribute/definition.js
var name11 = "create_attribute";
var options13 = {};
var acceptedArguments12 = [{ name: "attributes", defaultValue: {} }];
function createAttribute(attributes = {}) {
  let attributeObject;
  if (attributes instanceof Map || Array.isArray(attributes)) {
    attributeObject = new Attribute_default(attributes);
  } else {
    attributeObject = new Attribute_default();
    if (attributes) {
      Object.keys(attributes).forEach((key) => {
        if (key === "class" && !Array.isArray(attributes[key])) {
          attributeObject.setAttribute(key, [attributes[key]]);
        } else {
          attributeObject.setAttribute(key, attributes[key]);
        }
      });
    }
  }
  return attributeObject;
}

// node_modules/drupal-twig-extensions/lib/functions/create_attribute/twig.js
var callable11 = createAttribute;
var twig_default12 = newTwigExtension_default(name11, callable11, options13, acceptedArguments12);

// node_modules/drupal-twig-extensions/lib/functions/file_url/definition.js
var name12 = "file_url";
var options14 = {};
var acceptedArguments13 = [{ name: "uri" }];
function fileUrl(config, uri) {
  const path = `${uri}`;
  const scheme = /^([\w-]+):\/\//;
  if (scheme.test(path) && Object.keys(config.streamWrapper).includes(path.match(scheme)[0])) {
    return `${config.baseUrl}${path.replace(
      scheme,
      (substring) => config.streamWrapper[substring] + "/"
    )}`;
  }
  if (path.slice(0, 1) === "/") {
    return path;
  }
  return path;
}
function configInit5(state2, config) {
  state2.baseUrl = "/";
  state2.streamWrapper = {
    "public://": "sites/default/files",
    "private://": "sites/default/private",
    "temporary://": "sites/default/tmp"
  };
  if (Object.prototype.hasOwnProperty.call(config, "base_url")) {
    state2.baseUrl = config.base_url;
    if (state2.baseUrl.slice(-1) !== "/") {
      state2.baseUrl += "/";
    }
  }
  if (Object.prototype.hasOwnProperty.call(config, "streamWrapper")) {
    state2.streamWrapper = {
      ...state2.streamWrapper,
      ...config.streamWrapper
    };
  }
}

// node_modules/drupal-twig-extensions/lib/functions/file_url/twig.js
function callable12(uri) {
  return fileUrl(config_default, uri);
}
var twig_default13 = newTwigExtension_default(name12, callable12, options14, acceptedArguments13);

// node_modules/drupal-twig-extensions/lib/functions/link/definition.js
var name13 = "link";
var options15 = {};
var acceptedArguments14 = [
  { name: "text" },
  { name: "url" },
  { name: "attributes", defaultValue: {} }
];
function link(text, url, attributes = {}) {
  return `<a href="${url}"${createAttribute(attributes)}>${text}</a>`;
}

// node_modules/drupal-twig-extensions/lib/functions/link/twig.js
var callable13 = link;
var twig_default14 = newTwigExtension_default(name13, callable13, options15, acceptedArguments14);

// node_modules/drupal-twig-extensions/lib/functions/path/definition.js
var options16 = {
  // Drupal defines this function with the is_safe_callback option set to
  // Drupal\Core\Template\TwigExtension::isUrlGenerationSafe.
  // We use the is_safe option instead:
  is_safe: ["html"]
};
var acceptedArguments15 = [
  { name: "name" },
  { name: "parameters", defaultValue: {} },
  { name: "options", defaultValue: {} }
];

// node_modules/drupal-twig-extensions/lib/functions/render_var/definition.js
var name14 = "render_var";
var options17 = {};

// node_modules/drupal-twig-extensions/lib/functions/render_var/twig.js
var callable14 = renderVar;
var twig_default15 = newTwigExtension_default(name14, callable14, options17);

// node_modules/drupal-twig-extensions/lib/functions/url/definition.js
var options18 = {
  // Drupal defines this function with the is_safe_callback option set to
  // Drupal\Core\Template\TwigExtension::isUrlGenerationSafe.
  // We use the is_safe option instead:
  is_safe: ["html"]
};
var acceptedArguments16 = [
  { name: "name" },
  { name: "parameters", defaultValue: {} },
  { name: "options", defaultValue: {} }
];

// node_modules/drupal-twig-extensions/lib/functions/twig.js
var functions = [
  twig_default10,
  twig_default11,
  newEmptyStringExtension_default(
    "attach_library",
    options12,
    acceptedArguments11
  ),
  twig_default12,
  twig_default13,
  twig_default14,
  newPassThroughExtension_default("path", options16, acceptedArguments15),
  twig_default15,
  newPassThroughExtension_default("url", options18, acceptedArguments16)
];
var twig_default16 = functions;

// node_modules/drupal-twig-extensions/lib/filters/configInit.js
var configInit6 = [configInit, configInit2];
var configInit_default = configInit6;

// node_modules/drupal-twig-extensions/lib/functions/configInit.js
var configInit7 = [
  configInit3,
  configInit4,
  configInit5
];
var configInit_default2 = configInit7;

// node_modules/drupal-twig-extensions/lib/twig.js
function addDrupalExtensions(twigInstance, config = {}) {
  twig_default9.forEach((filterArguments) => {
    twigInstance.extendFilter(...filterArguments);
  });
  twig_default16.forEach((functionArguments) => {
    twigInstance.extendFunction(...functionArguments);
  });
  [...configInit_default, ...configInit_default2].forEach((configInit8) => {
    configInit8(config_default, config);
  });
}
export {
  Attribute_default as Attribute,
  addDrupalExtensions
};
//# sourceMappingURL=drupal-twig-extensions_twig.js.map
